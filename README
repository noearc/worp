
Worp is an experimental sound / music / DSP engine written in LuaJIT, currently
in early alpha state.

Some highlights:

- Built on LuaJIT: the ease of using a high level language, but getting near
  native C performance. Even low-level DSP functions (filters, reverb) can be
  coded in Lua, still giving great performance.

- Live coding: add or update code while the application is running through the
  use of a vim plugin. New chunks can be sent and compiled on the fly.

- Bindings for Fluidsynth and midi support


Building 
========

Worp depends on the following packages:

- luajit (>= 2.0.0)
- Jack audio connection kit
- Fluidsynth

For live programming you need vim with built in lua support.

Worp currently has no proper build system, just some static makefiles. Build
by running 'make', and run from the current directory:

  $ make
  $ ./worp [script]

The prjs/ directory contains some example scripts, which can be passed on the
commandline to run at startup:

  $ ./worp prjs/scales.lua


Live programming
================

Worp has been designed to allow live editing of the code without interrupting
sound playback. New chunks of Lua code can be sent to worp trough a local
network socket, and are compiled and executed on the fly. A proof-of-concept
vim plugin is available which can send parts of the current file to a running
worp process.

Load the plugin with the vim command

  :luafile ~/sandbox/prjs/worp/vimplugin.lua<CR>

The plugin currently remaps the following vim key sequences:

  ,a     send the whole file to worp
  ,f     send the current function
  ,p     send the current paragraph
  ,<CR>  send the current line

Be careful with locals when using live coding: any functions or variables
defined local during chunk loading will not be available when loading the next
chunk. All code is loaded into the same environment, so use 'globals' instead.


Misc
====

During the development of worp I learned of the existence of Impromptu[1] and
SuperCollider[2], which both have features similar to worp (Event scheduling,
live coding, etc).  I've shamelessly stolen some other ideas from both projects
where I saw fit.

1. http://impromptu.moso.com.au/
2. http://supercollider.sourceforge.net/

