
= Introduction

Worp is an experimental sound / music / DSP engine written in LuaJIT, currently
in early alpha state.

This is what a typical Worp session might look like. The right top window is
Patchage, a Jack connection manager. On the bottom right the Worp process is
running, the terminal on the left is running Vim with the live code plugin.
Code is written in the editor, and sent to Worp chunk by chunk.

[http://player.vimeo.com/video/79407058]

== Built on LuaJIT

Worp is built on LuaJIT, a Just-In-Time Compiler (JIT) for the Lua programming
language. LuaJIT offers the flexibility of the Lua programming language, while
delivering near native performance. This allows for low-level DSP code
(filters, reverbs, etc.) to be written in a high level language.


== Libraries

Worp comes with default bindings for Jack audio and midi, and has built-in
support for Linuxsampler and Fluidsynth. A growing library of DSP primitives is
provided: oscillators, filters, delays, pitch-shifters, etc.


== Live coding

Worp supports live coding through the use of a plug-in for your favourite
editor (if your favourite editor is Vim). Code is sent from the editor into
the Worp process, where it is compiled and executed without disrupting the
current program flow.

Worp is in early development and subject to lots of changes. Expect
documentation to be outdated, examples to fail and API's to be different then
described.


= Running

The Worp source code is hosted on github. Currently there are no official
releases available, so get the latest code from Github and hope for the best.
There is no 'make install' target, simply start Worp from the source directory.

Check [http://github.com/zevv/worp] for the latest code.


  $ git clone https://github.com/zevv/worp.git
  $ cd worp
  $ make
  $ ./worp

